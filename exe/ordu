#!/usr/bin/env ruby
# frozen_string_literal: true

require 'ordu'
require 'erb'

module Ordu
  # Generator is an example ordu program which can be used to create ordu
  # programs from the command-line. It also serves as a nice example of how to
  # write a program with ordu.
  module Generator
    include Ordu

    # The program_name
    name 'ordu'

    # The program version - by adding this, the `version` command and the
    # `-V, --version` switches are added automatically.
    version Ordu::VERSION

    # Printed at the top of usage (i.e., used in the banner)
    desc 'Generate a new command-line application'

    # Printed when help is requested (with `help` or `-h, --help`).
    help <<-DESC
    Generates a new command-line application based on Ordu.
    DESC

    # Switches for the root command
    opt '-n', '--dry-run', 'just print what would be output'
    opt '-G', '--gemspec', 'create a gemspec'
    opt '-B', '--bundler', 'create a Gemfile'
    opt '-R', '--rakefile', 'create a Rakefile'
    opt '-D', '--dockerfile', 'create a Dockerfile'
    opt '-A', '--application', 'same as -BGSD' do
      set(:G, true) unless get(:'no-gemspec')
      set(:B, true) unless get(:'no-gemfile')
      set(:R, true) unless get(:'no-rakefile')
      set(:D, true) unless get(:'no-dockerfile')
    end

    # The program accepts one argument - the name of the program to be
    # generated.
    arg :name, type: String

    # This block is always executed _after_ switch parsing, _before_ any
    # actions.
    before do
      return @write = ->(f) { puts 'Writing %<file>s'.format(f) } if get(:n)

      @write = ->(f) { Pathname.new(f).write(template_for(f)) }
    end

    # This block is called if no sub-command is supplied. Here there's only
    # one action, but you can have several.
    action do |name = nil|
      name = guess_name if name.nil?
      @write["#{name}.gemspec"] if get(:G)
      @write['Gemfile'] if get(:B)
      @write['Rakefile'] if get(:R)
      @write['Dockerfile'] if get(:D)
      @write[name]
    end

    # This program doesn't have any sub-commands, but it would be easy to add
    # some here.

    private

    def template(name)
      case name
      when /(Gemfile|Rakefile|Dockerfile)/ then name
      when /(.+).gemspec/ then 'gemspec'
      when get(:name) then 'program'
      else
        raise ArgumentError('invalid template %<name>'.format(name))
      end
    end

    $PROGRAM_NAME == __FILE__ && start!
  end
end
